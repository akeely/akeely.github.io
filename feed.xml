<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrew Keely&#39;s Blog</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 06 Mar 2015 21:04:29 +0000</pubDate>
    <lastBuildDate>Fri, 06 Mar 2015 21:04:29 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Refactoring Two Guys and a Dream: Preparing to Test</title>
        <description>&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a post in a series about Refactoring TwoGuysAndADream.com. To see all posts in this series, go &lt;a href=&quot;/tags/TwoGuysAndADream&quot;&gt;here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the code changes for this post:&lt;br&gt;
&lt;a href=&quot;https://github.com/akeely/twoguysandadream/compare/c1dc18ffec8ab5dd01f8a12fc18f283037eb9d0a…ea08e97e492c41f0a6aacb7eb5d1a22ed57667ac&quot;&gt;Code changes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preparing-to-test&quot;&gt;Preparing to Test&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before writing the tests, I set up my project to to have different levels of tests. This allows me to write tests at different levels of abstraction, and to use appropriate tools for those different levels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started with three levels of tests - unit tests, functional tests and acceptance tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The unit tests will test individual units of work, and mock out any outside pieces. These tests will help me to verify that the code I write does what I expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The functional tests will test the business layer to ensure that the expected features are implemented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The acceptance tests will test the full stack to ensure that the application works as the user would expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The different layers also provide different opportunities to test integration. The unit tests can use mocks, stubs and spies to ensure quick developer feedback. The functional tests can use test in-memory databases to provide fast tests while still testing integration between different classes. Acceptance tests can run a little slower, but ensure integration throughout the stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the different layers allow me to use different testing frameworks. This both helps to use the best tool for the best purpose, and to provide clear context switching between tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To accomplish all of this, I took advantage of the &lt;a href=&quot;https://github.com/akeely/twoguysandadream/commit/7a1807d0f483a251f7d38f3bb4bbad46291966a7#diff-c197962302397baf3a4cc36463dce5ea&quot;&gt;sourceSets&lt;/a&gt; that the &lt;a href=&quot;http://gradle.org/docs/current/userguide/java_plugin.html&quot;&gt;Java plugin&lt;/a&gt; for Gradle provides.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;initial-acceptance-test-specifications&quot;&gt;Initial Acceptance Test Specifications&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started by writing acceptances tests. I chose &lt;a href=&quot;https://cukes.info/&quot;&gt;Cucumber JVM&lt;/a&gt; for these tests because it provides clear separation between the specifications being tested and the code that implements those specifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since I&amp;#8217;m only rewriting a single request for now, I added &lt;a href=&quot;b0ab30c5e001668bddeab6a6c&quot;&gt;specifications&lt;/a&gt; for that request.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-the-test-skeletons&quot;&gt;Adding the Test Skeletons&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the specifications were in place, I needed to add plumbing so that they would run. I started by adding a &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/ea08e97e492c41f0a6aacb7eb5d1a22ed57667ac/src/uat/groovy/com/twoguysandadream/AuctionTest.java&quot;&gt;test class&lt;/a&gt; that would bind my tests to the &lt;code&gt;test&lt;/code&gt; task. I then added skeleton &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/ea08e97e492c41f0a6aacb7eb5d1a22ed57667ac/src/uat/groovy/com/twoguysandadream/AuctionBoardStepDefs.groovy&quot;&gt;plumbing&lt;/a&gt; so that the test could run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With everything in place, we can run the tests:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/gradle-test-results.png&quot; alt=&quot;Screenshot of Gradle test results&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate>
        <link>/blog/2015/03/06/twoguysandadream-refactoring-preparing-to-test.html</link>
        <guid isPermaLink="true">/blog/2015/03/06/twoguysandadream-refactoring-preparing-to-test.html</guid>
        
        <category>TwoGuysAndADream</category>
        
        <category>Refactoring</category>
        
        <category>DomainDrivenDesign</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Refactoring Two Guys and a Dream: Initial Domain Model</title>
        <description>&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a post in a series about Refactoring TwoGuysAndADream.com. To see all posts in this series, go &lt;a href=&quot;/tags/TwoGuysAndADream&quot;&gt;here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the code changes for this post:&lt;br&gt;
&lt;a href=&quot;https://github.com/akeely/twoguysandadream/compare/3f771eda39f9b9ad31fb2f85e3eaa52b408df53d…c1dc18ffec8ab5dd01f8a12fc18f283037eb9d0a&quot;&gt;Code changes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jumping-ahead&quot;&gt;Jumping Ahead&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I mentioned in my &lt;a href=&quot;/refactoring/twoguysandadream/2015/02/18/twoguysandadream-refactoring-database-migration.html&quot;&gt;last post&lt;/a&gt; that I want to write some tests before I start implementing the new API. Before I do that though, I implemented a basic domain model. While this may be out of order in the ideal refactoring strategy, considering the domain model helps me to reason about what tests to write and what functionality I&amp;#8217;m replacing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;initial-model&quot;&gt;Initial Model&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://yuml.me/12bc6e5a&quot; alt=&quot;Initial Domain Model&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To create my domain model, I wanted to apply the principle of &lt;a href=&quot;http://smile.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot;&gt;Domain Driven Design&lt;/a&gt; and the &lt;a href=&quot;http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Clean Architecture&lt;/a&gt;. My &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/c1dc18ffec8ab5dd01f8a12fc18f283037eb9d0a/src/main/java/com/twoguysandadream/core&quot;&gt;initial model&lt;/a&gt; is fairly simple. I started with an aggregate root of a &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/c1dc18ffec8ab5dd01f8a12fc18f283037eb9d0a/src/main/java/com/twoguysandadream/core/League.java&quot;&gt;League&lt;/a&gt; which is the public API of the domain. The aggregate includes &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/c1dc18ffec8ab5dd01f8a12fc18f283037eb9d0a/src/main/java/com/twoguysandadream/core/Team.java&quot;&gt;Team&lt;/a&gt; and &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/c1dc18ffec8ab5dd01f8a12fc18f283037eb9d0a/src/main/java/com/twoguysandadream/core/Player.java&quot;&gt;Player&lt;/a&gt; entities, and &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/c1dc18ffec8ab5dd01f8a12fc18f283037eb9d0a/src/main/java/com/twoguysandadream/core/Bid.java&quot;&gt;Bid&lt;/a&gt; value objects. The &lt;code&gt;League&lt;/code&gt; aggregate root includes methods to retrieve all of the rosters of teams in the league, and statistics about &lt;code&gt;Teams&lt;/code&gt;. See the &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/c1dc18ffec8ab5dd01f8a12fc18f283037eb9d0a/src/main/java/com/twoguysandadream/core&quot;&gt;full implementation&lt;/a&gt; to view additional details about the domain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;notes-about-the-model&quot;&gt;Notes About the Model&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This model is intentionally oversimplified to only provide the functionality I need for the request I am refactoring. As I refactor other portions of the site, the model will grow and change to reflect additional functionality. I fully expect the model to evolve, very possibly to the point where this initial model is no longer recognizable. The goal for this stage was to think critically about the domain, not to design the perfect model.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sat, 21 Feb 2015 00:00:00 +0000</pubDate>
        <link>/blog/2015/02/21/twoguysandadream-refactoring-domain-model.html</link>
        <guid isPermaLink="true">/blog/2015/02/21/twoguysandadream-refactoring-domain-model.html</guid>
        
        <category>TwoGuysAndADream</category>
        
        <category>Refactoring</category>
        
        <category>DomainDrivenDesign</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Refactoring Two Guys and a Dream: Database Migration</title>
        <description>&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a post in a series about Refactoring TwoGuysAndADream.com. To see all posts in this series, go &lt;a href=&quot;/tags/TwoGuysAndADream&quot;&gt;here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the code changes for this post:&lt;br&gt;
&lt;a href=&quot;https://github.com/akeely/twoguysandadream/compare/45a43c9d44059d5c9756f95b286f91d7e0333f3f…3f771eda39f9b9ad31fb2f85e3eaa52b408df53d&quot;&gt;Code changes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preparing-to-refactor&quot;&gt;Preparing to Refactor&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before I start making code changes, I want to write some tests to verify the functionality that I&amp;#8217;m replacing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started, I needed to set up a test environment. Historically, all of our testing was done manually and on the application itself in the production environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My first step to create test environment was to create a test database.  This will allow me to execute tests without modifying the production MySQL database. To do this, I looked toward database migration tools.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;flyway-db&quot;&gt;Flyway DB&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first tool I tried was &lt;a href=&quot;http://flywaydb.org/&quot;&gt;Flyway&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To start, I created a &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/4b1ff265fc24bc48421a49e21ca23db07576c471/src/main/resources/db/migration/V1__InitialDB.sql&quot;&gt;migration script&lt;/a&gt; using &lt;code&gt;mysqldump&lt;/code&gt;. Given this script, I was able to initialize a local MySQL database that matched the schema of the production database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, this approach would leave my tests dependent on a local MySQL server running. This limits the portability of the tests (every developer or execution environment would need to start up a MySQL server and create a database, or have access to my development environment). It also makes automation more difficult because it leaves persistent state that needs to be managed across test executions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To mitigate these limitations, I&amp;#8217;d prefer to use an in memory database for my testing (such as &lt;a href=&quot;http://www.hsqldb.org/&quot;&gt;HSQLDB&lt;/a&gt;, &lt;a href=&quot;http://www.h2database.com/html/main.html&quot;&gt;H2&lt;/a&gt; or &lt;a href=&quot;http://db.apache.org/derby/&quot;&gt;Derby&lt;/a&gt;). While using a different database in testing can introduce integration problems of its own, additional levels of testing can help prevent them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My migration script contained a significant amount of MySQL-specific syntax, and so migrating to a different database was difficult.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;liquibase&quot;&gt;Liquibase&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, I tried using &lt;a href=&quot;http://www.liquibase.org/&quot;&gt;Liquibase&lt;/a&gt;. Following &lt;a href=&quot;http://www.liquibase.org/documentation/generating_changelogs.html&quot;&gt;these instructions&lt;/a&gt;, I was able to generate a (mostly) database independent &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/4b1ff265fc24bc48421a49e21ca23db07576c471/src/main/resources/db/liquibase/changelog.xml&quot;&gt;changelog&lt;/a&gt; to specify the schema.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With a small amount of manual editing to remove MySQL specific elements (such as enums and key names), I successfully created an HSQLDB &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/3f771eda39f9b9ad31fb2f85e3eaa52b408df53d/src/test/resources/db&quot;&gt;file-based database&lt;/a&gt; that I could use for testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, I added a small &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/3f771eda39f9b9ad31fb2f85e3eaa52b408df53d/src/test/java/com/twoguysandadream/dal&quot;&gt;unit test&lt;/a&gt; to verify that the HSQLDB could be used for testing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>
        <link>/blog/2015/02/18/twoguysandadream-refactoring-database-migration.html</link>
        <guid isPermaLink="true">/blog/2015/02/18/twoguysandadream-refactoring-database-migration.html</guid>
        
        <category>TwoGuysAndADream</category>
        
        <category>Refactoring</category>
        
        <category>Database</category>
        
        <category>Liquibase</category>
        
        <category>FlywayDB</category>
        
        <category>MySQL</category>
        
        <category>HSQLDB</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Refactoring Two Guys and a Dream: Getting Started</title>
        <description>&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a post in a series about Refactoring TwoGuysAndADream.com. To see all posts in this series, go &lt;a href=&quot;/tags/TwoGuysAndADream&quot;&gt;here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the code changes for this post:&lt;br&gt;
&lt;a href=&quot;https://github.com/akeely/twoguysandadream/compare/5d63d83e38d137883a31eadeafe0bb6f6132c3c9…45a43c9d44059d5c9756f95b286f91d7e0333f3f&quot;&gt;Code changes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-to-replace&quot;&gt;What to Replace&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started on refactoring, I wanted to isolate a single piece of functionality to replace. From monitoring the load during the last draft (and our knowledge of the site), I was able to isolate a single request that caused most of our performance problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During an auction, the auction board is refreshed every second. The data is collected by making a request to &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/0904a0aefbcd47f24fd26e2aedfce9c424b1f3d4/cgi-bin/fantasy/checkBids.pl&quot;&gt;&lt;code&gt;checkBids.pl&lt;/code&gt;&lt;/a&gt;. With an average of 12 users during an auction, we expect about 12 requests per second. For a modern web application, this is not much, but for an inefficient perl script running on minimal hardware, it caused load issues.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;isolating-the-request&quot;&gt;Isolating the Request&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the auction board user interface is generated by Perl CGI scripts, the content is mostly static. I was able to extract static &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/454fc4e457870798ec6545c5d3ca60d3e53d6239/public/auction.html&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/454fc4e457870798ec6545c5d3ca60d3e53d6239/public/all_js.js&quot;&gt;JavaScript&lt;/a&gt; files generated by the CGI scripts using browser tools. I made a &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/454fc4e457870798ec6545c5d3ca60d3e53d6239/public/all_js.js#L182&quot;&gt;small change&lt;/a&gt; to the JavaScript file so that it would request data from a new endpoint rather than the CGI script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also made a request to the existing &lt;code&gt;checkBids.pl&lt;/code&gt; CGI script to determine the structure of the JSON response, and saved it to a &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/454fc4e457870798ec6545c5d3ca60d3e53d6239/src/main/resources/checkBids.json&quot;&gt;file&lt;/a&gt;. (I used a test league and set up the league state appropriately to ensure I would cover most of the response content as it would be seen during a draft).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;creating-a-prototype&quot;&gt;Creating a Prototype&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the interface was ready, I created a new Spring Boot project to hold the refactored code. In that project, I created a &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/45a43c9d44059d5c9756f95b286f91d7e0333f3f/src/main/java/com/twoguysandadream/resources/legacy/AuctionBoard.java&quot;&gt;simple controller&lt;/a&gt; that served the static JSON response I generated in the previous step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With these pieces in place, I am now able to start the application and see that the pieces  fit together:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/auction-prototype.png&quot; alt=&quot;Screenshot of prototype&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
        <link>/blog/2015/02/15/twoguysandadream-refactoring-getting-started.html</link>
        <guid isPermaLink="true">/blog/2015/02/15/twoguysandadream-refactoring-getting-started.html</guid>
        
        <category>TwoGuysAndADream</category>
        
        <category>Refactoring</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Refactoring Two Guys and a Dream</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many years ago, Erik and I wrote a website to run auction-style drafts for fantasy sports. Over the years, we continued to maintain the site and slowly add features. During that time, most popular fantasy sports sites added auction drafts as an option, but we continued with our site. We like to think we provide features the other sites don&amp;#8217;t, though I&amp;#8217;m sure our emotional attachment to the site is playing a larger role in keeping it around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently though, we started running into performance issues with the site. The core of the site was written before either of us had any real software development experience, and it has grown into a jumble of Perl CGI files mixed with some JavaScript and HTML, with MySQL storing our data. We moved the site from a shared hosting service to AWS, and found that a micro instance on AWS couldn&amp;#8217;t handle the load. To mitigate, we&amp;#8217;ve had to upgrade to better instances whenever a draft occurs, but that shouldn&amp;#8217;t be necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this series of blog posts, I&amp;#8217;ll walk through the steps as we begin to refactor this legacy code into a more modern application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can follow along at our &lt;a href=&quot;https://github.com/akeely/twoguysandadream&quot;&gt;Github repo&lt;/a&gt; for the site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And with each post, we&amp;#8217;ll include a link to the diffs for that stage of refactoring, starting with the &lt;a href=&quot;https://github.com/akeely/twoguysandadream/compare/edac1216275cfba0e2ff2e7b77136e129e6514c9&amp;#8230;&amp;#8203;5d63d83e38d137883a31eadeafe0bb6f6132c3c9&quot;&gt;initial commit of the old code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 13 Feb 2015 00:00:00 +0000</pubDate>
        <link>/blog/2015/02/13/twoguysandadream-refactoring-intro.html</link>
        <guid isPermaLink="true">/blog/2015/02/13/twoguysandadream-refactoring-intro.html</guid>
        
        <category>TwoGuysAndADream</category>
        
        <category>Refactoring</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Getting Started with Jekyll and Asciidoc</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the steps I followed to create this blog on Github Pages using Jekyll and Asciidoc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;github-project-setup&quot;&gt;Github Project Setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create your project in Github with the name &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;, and clone it to your local development environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a branch (I used the name &lt;code&gt;jekyll&lt;/code&gt;) and switch to it to store your infrastructure (the generated HTML will live in the master branch):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;git checkout -b jekyll&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, you can also add your &lt;code&gt;.gitignore&lt;/code&gt; file. Mine looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;.bundle/
_site
.sass-cache
Gemfile.lock
.DS_Store&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;install-jekyll-and-asciidoc&quot;&gt;Install Jekyll and Asciidoc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a prerequisite, make sure you have &lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;ruby&lt;/a&gt; and &lt;a href=&quot;https://rubygems.org/&quot;&gt;rubygems&lt;/a&gt; installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install Jekyll, first install &lt;code&gt;bundler&lt;/code&gt; to use as a package manager:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;gem install bundler&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then create your Gemfile with the following contents to require Jekyll, Asciidoctor and the Asciidoc plugin for Jekyll:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;source &#39;https://rubygems.org&#39;

gem &#39;jekyll&#39;
gem &#39;asciidoctor&#39;

group :jekyll_plugins do
  gem &quot;jekyll-asciidoc&quot;
end&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, install the contents of your Gemfile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;bundle install&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-your-blog&quot;&gt;Create Your Blog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To start, I added a single post, which must follow the following naming convention:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;_posts/&amp;lt;YYYY-MM-DD&amp;gt;-&amp;lt;postname&amp;gt;.adoc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And have the necessary &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;front matter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full Jekyll directory structure is &lt;a href=&quot;http://jekyllrb.com/docs/structure/&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;run-your-blog-locally&quot;&gt;Run Your Blog Locally&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To start your blog locally, run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;bundle exec jekyll serve&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your blog should now be accessible at &lt;a href=&quot;http://localhost:4000&quot; class=&quot;bare&quot;&gt;http://localhost:4000&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;automate-your-blog&quot;&gt;Automate Your Blog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, use &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; to automate your blog. Follow the instructions &lt;a href=&quot;http://eshepelyuk.github.io/2014/10/28/automate-github-pages-travisci.html&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
        <link>/blog/2015/02/11/getting-started-jekyll-asciidoc.html</link>
        <guid isPermaLink="true">/blog/2015/02/11/getting-started-jekyll-asciidoc.html</guid>
        
        <category>Jekyll</category>
        
        <category>Asciidoc</category>
        
        <category>Github</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
