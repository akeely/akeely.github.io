<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrew Keely&#39;s Blog</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 15 Feb 2015 18:23:29 +0000</pubDate>
    <lastBuildDate>Sun, 15 Feb 2015 18:23:29 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Refactoring Two Guys and a Dream</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many years ago, Erik and I wrote a website to run auction-style drafts for fantasy sports. Over the years, we continued to maintain the site and slowly add features. During that time, most popular fantasy sports sites added auction drafts as an option, but we continued with our site. We like to think we provide features the other sites don&amp;#8217;t, though I&amp;#8217;m sure our emotional attachment to the site is playing a larger role in keeping it around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently though, we started running into performance issues with the site. The core of the site was written before either of us had any real software development experience, and it has grown into a jumble of Perl CGI files mixed with some JavaScript and HTML, with MySQL storing our data. We moved the site from a shared hosting service to AWS, and found that a micro instance on AWS couldn&amp;#8217;t handle the load. To mitigate, we&amp;#8217;ve had to upgrade to better instances whenever a draft occurs, but that shouldn&amp;#8217;t be necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this series of blog posts, I&amp;#8217;ll walk through the steps as we begin to refactor this legacy code into a more modern application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can follow along at our &lt;a href=&quot;https://github.com/akeely/twoguysandadream&quot;&gt;Github repo&lt;/a&gt; for the site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And with each post, we&amp;#8217;ll include a link to the diffs for that stage of refactoring, starting with the &lt;a href=&quot;https://github.com/akeely/twoguysandadream/compare/edac1216275cfba0e2ff2e7b77136e129e6514c9&amp;#8230;&amp;#8203;5d63d83e38d137883a31eadeafe0bb6f6132c3c9&quot;&gt;initial commit of the old code&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 13 Feb 2015 00:00:00 +0000</pubDate>
        <link>/refactoring/twoguysandadream/2015/02/13/twoguysandadream-refactoring-intro.html</link>
        <guid isPermaLink="true">/refactoring/twoguysandadream/2015/02/13/twoguysandadream-refactoring-intro.html</guid>
        
        <category>TwoGuysAndADream</category>
        
        <category>Refactoring</category>
        
        
        <category>refactoring</category>
        
        <category>twoguysandadream</category>
        
      </item>
    
      <item>
        <title>Refactoring Two Guys and a Dream: Getting Started</title>
        <description>&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a post in a series about Refactoring TwoGuysAndADream.com. To see all posts in this series, go &lt;a href=&quot;/tags/TwoGuysAndADream&quot;&gt;here&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sidebarblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the code changes for this post: &lt;a href=&quot;https://github.com/akeely/twoguysandadream/compare/5d63d83e38d137883a31eadeafe0bb6f6132c3c9&amp;#8230;&amp;#8203;45a43c9d44059d5c9756f95b286f91d7e0333f3f&quot;&gt;Code changes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&quot;what-to-replace&quot; class=&quot;sect0&quot;&gt;What to Replace&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get started on refactoring, I wanted to isolate a single piece of functionality to replace. From monitoring the load during the last draft (and our knowledge of the site), I was able to isolate a single request that caused most of our performance problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;During an auction, the auction board is refreshed every second. The data is collected by making a request to &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/0904a0aefbcd47f24fd26e2aedfce9c424b1f3d4/cgi-bin/fantasy/checkBids.pl&quot;&gt;&lt;code&gt;checkBids.pl&lt;/code&gt;&lt;/a&gt;. With an average of 12 users during an auction, we expect about 12 requests per second. For a modern web application, this is not much, but for an inefficient perl script running on minimal hardware, it caused load issues.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;isolating-the-request&quot; class=&quot;sect0&quot;&gt;Isolating the Request&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While the auction board user interface is generated by Perl CGI scripts, the content is mostly static. I was able to extract static &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/454fc4e457870798ec6545c5d3ca60d3e53d6239/public/auction.html&quot;&gt;HTML&lt;/a&gt; and &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/454fc4e457870798ec6545c5d3ca60d3e53d6239/public/all_js.js&quot;&gt;JavaScript&lt;/a&gt; files generated by the CGI scripts using browser tools. I made a &lt;a href=&quot;https://github.com/akeely/twoguysandadream/blob/454fc4e457870798ec6545c5d3ca60d3e53d6239/public/all_js.js#L182&quot;&gt;small change&lt;/a&gt; to the JavaScript file so that it would request data from a new endpoint rather than the CGI script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also made a request to the existing &lt;code&gt;checkBids.pl&lt;/code&gt; CGI script to determine the structure of the JSON response, and saved it to a &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/454fc4e457870798ec6545c5d3ca60d3e53d6239/src/main/resources/checkBids.json&quot;&gt;file&lt;/a&gt;. (I used a test league and set up the league state appropriately to ensure I would cover most of the response content as it would be seen during a draft).&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&quot;creating-a-prototype&quot; class=&quot;sect0&quot;&gt;Creating a Prototype&lt;/h1&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once the interface was ready, I created a new Spring Boot project to hold the refactored code. In that project, I created a &lt;a href=&quot;https://github.com/akeely/twoguysandadream/tree/45a43c9d44059d5c9756f95b286f91d7e0333f3f/src/main/java/com/twoguysandadream/resources/legacy/AuctionBoard.java&quot;&gt;simple controller&lt;/a&gt; that served the static JSON response I generated in the previous step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With these pieces in place, I am now able to start the application and see that the pieces  fit together:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/auction-prototype.png&quot; alt=&quot;Screenshot of prototype&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Fri, 13 Feb 2015 00:00:00 +0000</pubDate>
        <link>/refactoring/twoguysandadream/2015/02/13/twoguysandadream-refactoring-getting-started.html</link>
        <guid isPermaLink="true">/refactoring/twoguysandadream/2015/02/13/twoguysandadream-refactoring-getting-started.html</guid>
        
        <category>TwoGuysAndADream</category>
        
        <category>Refactoring</category>
        
        
        <category>refactoring</category>
        
        <category>twoguysandadream</category>
        
      </item>
    
      <item>
        <title>Getting Started with Jekyll and Asciidoc</title>
        <description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the steps I followed to create this blog on Github Pages using Jekyll and Asciidoc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;github-project-setup&quot;&gt;Github Project Setup&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create your project in Github with the name &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;, and clone it to your local development environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a branch (I used the name &lt;code&gt;jekyll&lt;/code&gt;) and switch to it to store your infrastructure (the generated HTML will live in the master branch):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;git checkout -b jekyll&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point, you can also add your &lt;code&gt;.gitignore&lt;/code&gt; file. Mine looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;.bundle/
_site
.sass-cache
Gemfile.lock
.DS_Store&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;install-jekyll-and-asciidoc&quot;&gt;Install Jekyll and Asciidoc&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a prerequisite, make sure you have &lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;ruby&lt;/a&gt; and &lt;a href=&quot;https://rubygems.org/&quot;&gt;rubygems&lt;/a&gt; installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install Jekyll, first install &lt;code&gt;bundler&lt;/code&gt; to use as a package manager:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;gem install bundler&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then create your Gemfile with the following contents to require Jekyll, Asciidoctor and the Asciidoc plugin for Jekyll:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;source &#39;https://rubygems.org&#39;

gem &#39;jekyll&#39;
gem &#39;asciidoctor&#39;

group :jekyll_plugins do
  gem &quot;jekyll-asciidoc&quot;
end&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, install the contents of your Gemfile:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;bundle install&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-your-blog&quot;&gt;Create Your Blog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To start, I added a single post, which must follow the following naming convention:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;_posts/&amp;lt;YYYY-MM-DD&amp;gt;-&amp;lt;postname&amp;gt;.adoc&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And have the necessary &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;front matter&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full Jekyll directory structure is &lt;a href=&quot;http://jekyllrb.com/docs/structure/&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;run-your-blog-locally&quot;&gt;Run Your Blog Locally&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To start your blog locally, run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;bundle exec jekyll serve&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your blog should now be accessible at &lt;a href=&quot;http://localhost:4000&quot; class=&quot;bare&quot;&gt;http://localhost:4000&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;automate-your-blog&quot;&gt;Automate Your Blog&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, use &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; to automate your blog. Follow the instructions &lt;a href=&quot;http://eshepelyuk.github.io/2014/10/28/automate-github-pages-travisci.html&quot;&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        <pubDate>Wed, 11 Feb 2015 00:00:00 +0000</pubDate>
        <link>/blog/2015/02/11/getting-started-jekyll-asciidoc.html</link>
        <guid isPermaLink="true">/blog/2015/02/11/getting-started-jekyll-asciidoc.html</guid>
        
        <category>Jekyll</category>
        
        <category>Asciidoc</category>
        
        <category>Github</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
